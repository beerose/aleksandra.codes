:root {
  --container-width: 43rem;
  --wide-content-width: min(100vw, calc(var(--container-width) * 1.2));
}

.zaduma-prose {
  /* TODO: Get rid of thesse two and apply Tailwind styles */
  --sans: "Inter";
  --serif: "Brygada 1918";
  --italic-serif: italic 444 1.15em var(--serif);

  --block-mb: 1.5rem; /* same as Tailwind's mb-6 */

  @apply max-w-container;

  & > :not(:last-child) {
    margin-bottom: var(--block-mb);
  }

  & hr {
    @apply border-gray-100 dark:border-gray-800 border-b-2;
  }

  /* #region text â€” p, em, and strong */

  & p {
    @apply max-w-prose p-2 -m-2;

    line-height: 1.75;
    text-overflow: ellipsis;
    overflow-x: hidden;

    /* This is under assumption that `img` is full width image not just an icon. */
    /* I can think of a reorganization using CSS Grid that would also work on Firefox,
       but this seems sufficient for the time being. */
    &:has(img) {
      overflow-x: visible;
      padding-left: 0;
      padding-right: 0;
      margin-left: 0;
      margin-right: 0;
    }

    & a {
      white-space: nowrap;
      max-width: var(--container-width);
    }
  }

  & em {
    font: var(--italic-serif);
  }

  & strong,
  & strong > em {
    font-weight: 700;
  }

  /* #endregion */

  /* #region images */

  & img {
    @apply dark:opacity-80 rounded-sm;
    transform: translateX(-50%);
    margin-left: 50%;
    max-width: var(--wide-content-width);
  }

  & .zaduma-image-box {
    @apply inline-block rounded-sm;
    max-width: unset;
    transform: translateX(min(calc((100% - var(--container-width)) / -2), 0px));
    & img {
      margin-left: unset;
      transform: unset;
    }

    & .zaduma-image-box {
      transform: unset;
    }

    &:is(a) {
      padding-bottom: 0;
    }
  }

  /* #endregion images */
}

/* Introduced in src/build-time/asidesPlugin.ts */
.zaduma-aside {
  --aside-width: 20rem;
  --gap: 1rem;
  --divider-width: 1px;

  display: flex;
  flex-wrap: wrap;
  width: calc(100% + var(--aside-width) + var(--gap) + var(--divider-width));
  max-width: 100vw;

  & > :first-child {
    @apply flex-shrink-0 flex-grow max-w-container w-full;
  }

  & > aside {
    @apply flex-shrink-0 flex-grow relative h-min text-sm;
    width: var(--aside-width);
    padding-left: var(--gap);

    &::before {
      content: "";
      @apply border-l absolute h-full -left-px dark:border-gray-700;
    }
  }

  @media (max-width: 1280px) {
    & {
      width: 100%;
    }

    & > aside {
      margin-top: var(--block-mb);

      &::before {
        /* The left border of `aside` will always be positioned inside of the
           prose container. */
        @apply left-0;
      }
    }
  }
}
