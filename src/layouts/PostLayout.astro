---
import type { MarkdownLayoutProps } from "astro";

import { createOgImageLink } from "../lib/createOgImageLink";
import { formatDate } from "../lib/formatDate";
import Image from "../lib/prose/Image.astro";
import TableOfContents from "../lib/TableOfContents/TableOfContents.astro";
import type { PostFrontmatter, TalkFrontmatter } from "../types";

import BaseLayout from "./BaseLayout.astro";

import "../global-styles/shiki.css";

type Props = Omit<MarkdownLayoutProps<{}>, "frontmatter"> &
  (
    | {
        frontmatter: PostFrontmatter;
        type: "post";
      }
    | {
        frontmatter: TalkFrontmatter;
        type: "talk";
      }
  );

const { frontmatter, headings } = Astro.props;

const ogImage = createOgImageLink(frontmatter);
const readingTime = frontmatter.readingTime;
const date = new Date(frontmatter.date);
---

<BaseLayout
  title={frontmatter.title}
  activePage={Astro.props.type === "post" ? "writing" : "speaking"}
  description={frontmatter.excerpt || ""}
  ogImage={ogImage}
>
  {
    Astro.props.type === "post" ? (
      <main class="zaduma-prose py-4 self-center">
        <header class="flex flex-col space-y-2">
          <h1 class="!my-0">{frontmatter.title}</h1>
          <p class="text-gray-600 dark:text-gray-400 text-sm">
            {readingTime.minutes > 1 && (
              <>
                <span>{readingTime.text}</span>
                {" · "}
              </>
            )}
            <time
              datetime={date.toISOString()}
              class="tabular-nums tracking-tighter"
            >
              {formatDate(date)}
            </time>
          </p>
        </header>
        {frontmatter.img && (
          <Image
            alt=""
            src={frontmatter.img}
            format="webp"
            width={774}
            aspectRatio={2}
          />
        )}
        <slot />
      </main>
    ) : (
      <main class="zaduma-prose py-4 space-y-4 self-center container">
        <header class="flex flex-col space-y-2">
          <h1 class="!my-0">{frontmatter.title}</h1>
          <p class="text-gray-600 dark:text-gray-400 text-sm">
            <time datetime={date.toISOString()}>
              Given on {formatDate(date)}
            </time>
            {" · "}
            <span>at {frontmatter.event}</span>
            {" · "}
            <span>{frontmatter.place}</span>
          </p>
          <div class="space-x-2">
            {(frontmatter.video || frontmatter.youtubeId) && (
              <a
                class={
                  "hover:translate-x-1 hover:underline underline-offset-4 decoration-wavy decoration-gray-500 decoration-1 duration-100 whitespace-nowrap rounded-sm text-sm text-gray-600 dark:text-gray-400 no-underline"
                }
                href={
                  frontmatter.video ||
                  `https://youtu.be/${frontmatter.youtubeId}`
                }
              >
                <span>Recording ↗</span>
              </a>
            )}
            {frontmatter.slides && (
              <a
                class={
                  "hover:translate-x-1 hover:underline underline-offset-4 decoration-wavy decoration-gray-500 decoration-1 duration-100 whitespace-nowrap rounded-sm text-sm text-gray-600 dark:text-gray-400 no-underline"
                }
                href={frontmatter.slides}
              >
                <span>Slides ↗</span>
              </a>
            )}
          </div>
          <span class="text-sm">Length: {frontmatter.duration} min</span>
        </header>
        <div>
          {frontmatter.img !== "" && frontmatter.video && (
            <a
              href={frontmatter.video}
              target="_blank"
              class="hover:opacity-90"
            >
              <div class="relative">
                <Image
                  alt={frontmatter.title}
                  src={frontmatter.img}
                  format="webp"
                  width={774}
                  aspectRatio={2}
                  class="h-full object-cover"
                />
                <div class="left-0 absolute top-0 h-full w-full items-center flex justify-center">
                  <div class="border-[4px] border-white border-solid rounded-full h-24 w-24 items-center flex justify-center p-5 pl-7 bg-gray-800 bg-opacity-60">
                    <svg
                      fill="#fff"
                      height="800px"
                      width="800px"
                      version="1.1"
                      id="Capa_1"
                      xmlns="http://www.w3.org/2000/svg"
                      xmlns:xlink="http://www.w3.org/1999/xlink"
                      viewBox="0 0 58.752 58.752"
                      xml:space="preserve"
                    >
                      <g>
                        <path
                          d="M52.524,23.925L12.507,0.824c-1.907-1.1-4.376-1.097-6.276,0C4.293,1.94,3.088,4.025,3.088,6.264v46.205
                        		c0,2.24,1.204,4.325,3.131,5.435c0.953,0.555,2.042,0.848,3.149,0.848c1.104,0,2.192-0.292,3.141-0.843l40.017-23.103
                        		c1.936-1.119,3.138-3.203,3.138-5.439C55.663,27.134,54.462,25.05,52.524,23.925z M49.524,29.612L9.504,52.716
                        		c-0.082,0.047-0.18,0.052-0.279-0.005c-0.084-0.049-0.137-0.142-0.137-0.242V6.263c0-0.1,0.052-0.192,0.14-0.243
                        		c0.042-0.025,0.09-0.038,0.139-0.038c0.051,0,0.099,0.013,0.142,0.038l40.01,23.098c0.089,0.052,0.145,0.147,0.145,0.249
                        		C49.663,29.47,49.611,29.561,49.524,29.612z"
                        />
                      </g>
                    </svg>
                  </div>
                </div>
              </div>
            </a>
          )}
          {frontmatter.youtubeId && (
            <lite-youtube videoId={frontmatter.youtubeId} />
          )}
        </div>
        <div>
          <slot />
        </div>
      </main>
    )
  }
  <TableOfContents headings={headings} />
</BaseLayout>
